{
    "title": "Adapter - Wrapper",
    "description": "Wzorzec projektowy Adapter, znany również jako Wrapper, to strukturalny wzorzec projektowy, który umożliwia współpracę obiektów o niekompatybilnych interfejsach. Adapter działa jako tłumacz pomiędzy dwoma różnymi interfejsami. To oznacza, że jeśli mamy dwie różne klasy z różnymi interfejsami, które muszą ze sobą współpracować, to zamiast modyfikować kod istniejących klas, możemy stworzyć nową klasę adaptera, która będzie tłumaczyła żądania jednej klasy na interfejs drugiej klasy. Działa to poprzez osadzenie jednego obiektu w drugim obiekcie, który ma oczekiwany interfejs. Ta technika jest szczególnie przydatna w przypadku istniejących klas, które nie mogą być modyfikowane, ale muszą współpracować z innymi klasami. Głównym celem wzorca Adapter jest zapewnienie spójności w przypadku, gdy klasy mają różne interfejsy, a modyfikacja istniejących kodów nie jest możliwa lub praktyczna. Jest to często stosowane w przypadkach, gdy chcemy zintegrować biblioteki zewnętrzne lub kod, który nie jest pod naszą kontrolą.",
    "explanation": "W tym przypadku, Adapter przekształca wywołanie new_method na old_method istniejącej instancji OldClass. W ten sposób możemy korzystać z OldClass jakby była NewClass, nie zmieniając istniejącego kodu OldClass.",
    "data": "class OldClass:\n    \"\"\"Klasa, która posiada niekompatybilny interfejs\"\"\"\n    def __init__(self):\n        self.value = \"Stare wartości\"\n\n    def old_method(self):\n        return self.value\n\n\nclass NewClass:\n    \"\"\"Nowa klasa oczekująca innych interfejsów\"\"\"\n    def __init__(self):\n        self.value = \"Nowe wartości\"\n\n    def new_method(self):\n        return self.value\n\n\nclass Adapter:\n    \"\"\"Klasa Adapter, umożliwiająca współpracę między OldClass i NewClass\"\"\"\n    def __init__(self, old_class_instance):\n        self.old_class_instance = old_class_instance\n\n    def new_method(self):\n        # Przetłumacz stary interfejs na nowy\n        return self.old_class_instance.old_method()\n\n\n# Przykład użycia:\n\nold_class_instance = OldClass()\nadapter = Adapter(old_class_instance)\n\nprint(adapter.new_method())  # Wyświetli: \"Stare wartości\""
  }
  